
{#
  Renders more information about a type, including its comment plus its components: properties,
  parameters or enum.
#}
{% macro internalRenderTypeDetails(spec, namespaceName, headings, isParameter) %}

{% if spec.comment %}
  {# Our types converter ensures that these always are a series of <p></p>. #}
  <div class="type stack code-sections__description">
    {{ spec.comment | safe }}
  </div>
{% endif %}

{# OPTION: object properties #}
{% if spec.properties and spec.properties.length %}
  <div class="code-sections">
    {% if headings %}<h4 class="type--label case-upper">Properties</h4>{% endif %}

    <ul class="stack flow-space-300">
      {% for property in spec.properties %}
        {{ internalRenderNamedType(property, namespaceName) }}
      {% endfor %}
    </ul>
  </div>
{% endif %}

{# OPTION: method #}
{% if headings %}
  {# If this at the top-level, break out parameters and the return type. #}
  {% if spec.parameters and spec.parameters.length %}
    <div class="code-sections">
      <h4 class="type--label case-upper">Parameters</h4>

      <ul class="stack flow-space-300">
        {% for parameter in spec.parameters %}
          {{ internalRenderNamedType(parameter, namespaceName, true) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}
  {% if spec.returnType %}
    <div class="code-sections">
      <h4 class="type--label case-upper">Returns</h4>

      <ul class="stack flow-space-300">
        {{ internalRenderNamedType(spec.returnType, namespaceName) }}
      </ul>
    </div>
  {% endif %}
{% elif spec.type === 'function' %}
  {% if isParameter %}
    {# If this is a callback, just show parameters. These do not have a return type. #}
    <p>
      {% if spec.optional %}
        If you specify the {{ spec.name }} parameter, it
      {% else %}
        The {{ spec.name }} parameter
      {% endif %}
      should be a function that looks like this:
    </p>
    <div class="code-sections__callback type--xsmall">
      <code>{{ renderTypeSignatureParameters(spec, namespaceName) }} => {...}</code>
    </div>
  {% endif %}

  {% if spec.parameters.length %}
    <div class="code-sections">
      <ul class="stack flow-space-300">
        {% for parameter in spec.parameters %}
          {{ internalRenderNamedType(parameter, namespaceName, true) }}
        {% endfor %}
      </ul>
    </div>
  {% endif %}
{% endif %}

{% if spec.isEnum %}
  <div class="code-sections">
    {% if headings %}<h4 class="type--label case-upper">Enum</h4>{% endif %}

    <div class="code-sections__overline code-sections__label">
      <p>
        {% for option in spec.options %}
          {% if loop.last and not loop.first %}or{% endif %}
          <code>{{ renderSingleType(option, namespaceName) | trim }}</code>{% if not loop.last %},{% endif %}
        {% endfor %}
      </p>
    </div>
  </div>
{% endif %}

{% if spec.referenceType %}
  <div class="code-sections">
    {% if headings %}<h4 class="type--label case-upper">Type</h4>{% endif %}

    <div class="code-sections__overline code-sections__label">{{ renderSingleType(spec, namespaceName) }}</div>
  </div>
{% endif %}

{% endmacro %}

{% macro internalRenderNamedType(spec, namespaceName, isParameter) %}
<li>
  <div>
    <div class="code-sections__label">{{ spec.name }}</div>
    <div class="type--xsmall">{{ renderSingleType(spec, namespaceName) }}</div>
  </div>
  <div class="stack">
    {% if spec.type !== 'reference' %}
      {{ internalRenderTypeDetails(spec, namespaceName, false, isParameter) }}
    {% endif %}
  </div>
</li>
{% endmacro %}

{#
  Renders a single type as a single word. Used for signatures and type hints.
#}
{% macro renderSingleType(rt, namespaceName) %}

  {% if rt.type === 'primitive' %}
    {# Primitive value ("number") or literal ("abc") #}
    {{ rt.literalValue }}{{ rt.primitiveType }}
  {% elif rt.type === 'reference' %}
    {# Reference to another type #}

    {% set display = rt.referenceType %}
    {% set isLink = rt.referenceLink %}
    {% if display.startsWith(namespaceName + '.') %}
      {% set display = rt.referenceType.substr(namespaceName.length + 1) %}
      {% set link = "#type-" + display %}
    {% elif display.indexOf('.') === -1 %}
      {# Sometimes we get the ref without "chrome.foo." #}
      {% set link = "#type-" + display %}
    {% else %}
      {# Reference an adjacent type. #}
      {% set parts = display.split('.') %}
      {% if parts[0] === 'chrome' %}
        {% set link = "../" + parts.slice(1, parts.length - 1).join('_') + "/#type-" + parts[parts.length - 1] %}
      {% endif %}
    {% endif %}

    {% if rt.referenceLink and link %}
      <a class="code-sections__link" href="{{ link }}">{{ display }}</a>
    {%- else %}
      {{ display }}
    {%- endif -%}
    {%- if rt.referenceTemplates.length -%}
      &lt;
        {%- for t in rt.referenceTemplates -%}
          {{ renderSingleType(t, namespaceName) | trim }}
        {%- endfor -%}
      &gt;
    {% endif %}
  {% elif rt.type === 'array' %}
    {{ renderSingleType(rt.elementType, namespaceName) | trim }}[]
  {% elif rt.isEnum %}
    {# Union type that is actually an enum of primitives #}
    enum
  {% elif rt.type === 'union' %}
    {% for t in rt.options %}
      {{ renderSingleType(t, namespaceName) | trim }}{% if not loop.last %} | {% endif %}
    {% endfor %}
  {% else %}
    {{ rt.type }}
  {% endif %}

  {% if rt.optional %}
    <span class="code-sections__optional">optional</span>
  {% endif %}

{% endmacro %}

{#
  Renders an optional signature of a method.
#}
{% macro renderTypeSignature(rt, namespaceName) %}

  {% if rt.type === 'function' %}

    <div class="code-sections__signature">
      <code>
        {{ namespaceName }}.{{ rt.name }}{{ renderTypeSignatureParameters(rt, namespaceName) }}
        {%- if rt.returnType %}: {{ renderSingleType(rt.returnType, namespaceName) }}{% endif %}
      </code>
    </div>

  {% endif %}

{% endmacro %}

{#
  Renders the arguments of a method.
#}
{% macro renderTypeSignatureParameters(rt, namespaceName) -%}
  (
    {%- for parameter in rt.parameters -%}
      {{ parameter.name }}{% if parameter.optional %}?{% endif %}:
      <span class="code-sections__signature-type">{{ renderSingleType(parameter, namespaceName) | trim }}</span>
      {%- if not loop.last %}, {% endif -%}
    {%- endfor -%}
  )
{%- endmacro %}

{#
  Renders a short summary of the passed RenderType[]. Used at the top of a namespace page.
#}
{% macro renderSummarySection(namespaceName, label, prefix, array) %}

  {% if array.length %}
    <li>
      <div class="code-sections__label">{{ label }}</div>
      <div>
        {% for rt in array %}
          <div><a href="#{{ prefix }}-{{ rt.name }}" class="code-sections__link">{{ rt.name }}</a></div>
          {{ renderTypeSignature(rt, namespaceName) }}
        {% endfor %}
      </div>
    </li>
  {% endif %}

{% endmacro %}

{#
  Renders the whole list of the passed RenderType[].
#}
{% macro renderPrimarySection(namespaceName, id, label, prefix, array) %}

  {% if array.length %}
    <h2 class="type--h3" id="{{ id }}">{{ label }}</h2>
    {% for rt in array %}
      <div>
        <h3 class="type--h4" id="{{ prefix }}-{{ rt.name }}">{{ rt.name }}</h3>
        {{ renderTypeSignature(rt, namespaceName) }}
        {{ internalRenderTypeDetails(rt, namespaceName, true) }}
      </div>
    {% endfor %}
  {% endif %}

{% endmacro %}
